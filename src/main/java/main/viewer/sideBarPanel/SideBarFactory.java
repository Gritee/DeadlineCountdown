package main.viewer.sideBarPanel;

import main.viewer.DeadlineCountdownFactory;
import main.viewer.textFormat.ViewerFont;
import main.viewer.util.ModernScrollPane;

import javax.swing.BorderFactory;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JToolBar;
import javax.swing.KeyStroke;
import javax.swing.LookAndFeel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;
import java.awt.*;

/**
 * This class can be used to create necessary components for the side bar.
 * Components generated by this class would fit the theme of main:
 * borderless, flat, transparent, etc.
 */
class SideBarFactory {
    /**
     * This function would create a white line as a separator
     * @param color the color for the current line
     * @requires None
     * @modifies None
     * @effects None
     * @return a 1 pixel height JPanel
     */
    static JPanel createLineSeparator(Color color) {
        JPanel line =  DeadlineCountdownFactory.createEmptyArea(1, false);
        line.setBackground(color);
        return line;
    }

    /**
     * This function would create a JLabel with transparent background and white
     * text. Font is set to be mainFont.XHEI by default
     * @param text the string in this JLabel
     * @param fontSize the size of the font
     * @param textColor the color of the text
     * @requires None
     * @modifies None
     * @effects None
     * @return a JLabel
     */
    static JLabel createSimpleLabel(String text, int fontSize, Color textColor) {
        JLabel label = new JLabel(text);
        label.setFont(new Font(ViewerFont.XHEI, Font.PLAIN, fontSize));
        label.setForeground(textColor);
        return label;
    }

    /**
     * This function would create a JTextArea with transparent background and white
     * text. Need to set font manually after calling this function.
     * @param text the text in the JTextArea
     * @param height the absolute maximum height of this JTextarea
     * @param textColor the color of the text
     * @requires None
     * @modifies None
     * @effects None
     * @return the JTextarea
     */
    static JTextArea createSimpleTextArea(String text, Integer height, Color textColor) {
        JTextArea textArea = new JTextArea(text);
        textArea.setBackground(null);
        textArea.setOpaque(false);
        textArea.setEnabled(false);
        textArea.setDisabledTextColor(textColor);
        textArea.setMargin(new Insets(2, 5, 2,5));
        if (height != null) {
            textArea.setMaximumSize(new Dimension(Integer.MAX_VALUE, height));
            textArea.setPreferredSize(new Dimension(0, height));
        }
        return textArea;
    }

    /**
     * This function would create a JScrollPane with Flat design & dark background
     * @param insidePanel the panel that would stay inside the scroll pane
     * @param backgroundColor color for the background
     * @param scrollBarColor color for scroll bar
     * @requires insidePanel != null
     * @modifies None
     * @effects None
     * @return a new JScrollPane
     */
    static JScrollPane createSimpleScrollPanel(JPanel insidePanel, Color backgroundColor, Color scrollBarColor) {
        ModernScrollPane scrollPanel = new ModernScrollPane(insidePanel);
        scrollPanel.setScrollBarColor(scrollBarColor);
        scrollPanel.getVerticalScrollBar().setUnitIncrement(20);
        scrollPanel.setBackground(backgroundColor);
        scrollPanel.setOpaque(false);
        scrollPanel.getViewport().setBackground(backgroundColor);
        scrollPanel.getViewport().setOpaque(true);
        scrollPanel.getViewport().setBounds(0,0,0,0);
        scrollPanel.setBorder(BorderFactory.createEmptyBorder());
        return scrollPanel;
    }

    /**
     * This function will create a flat design JComboBox: transparent background,
     * dark popup menu and white text.
     * @param hoverColor Color for background when the user moves the cursor over it
     * @param backgroundColor Color for background
     * @param textColor Color for text
     * @requires None
     * @modifies None
     * @effects None
     * @return a new JComboBox
     */
    static JComboBox<String> createComboBox(Color hoverColor, Color backgroundColor, Color textColor) {
        JComboBox<String> choiceBox = new JComboBox<>();
        choiceBox.setUI(new BasicComboBoxUI() {
            @Override
            protected JButton createArrowButton() {
                 JButton arrowButton = DeadlineCountdownFactory.createSimpleButton("\u2BC6", backgroundColor, textColor);
                 arrowButton.setBackground(hoverColor);
                 return arrowButton;
            }

            @Override
            protected ComboPopup createPopup() {
                return new BasicComboPopup(comboBox) {
                    @Override
                    protected JScrollPane createScroller() {
                         JScrollPane result = new ModernScrollPane(list, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                                JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                         result.setAlignmentX(Component.LEFT_ALIGNMENT);
                         result.setHorizontalScrollBar(null);
                         return result;
                    }
                };
            }
        });
        ((JLabel) choiceBox.getRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        choiceBox.setForeground(textColor);
        choiceBox.setOpaque(false);
        choiceBox.setBackground(backgroundColor);
        choiceBox.setFont(new Font(ViewerFont.XHEI, Font.PLAIN, 16));
        JList list = ((BasicComboPopup) choiceBox.getAccessibleContext().getAccessibleChild(0)).getList();
        list.setSelectionBackground(hoverColor);
        list.setSelectionForeground(textColor);
        list.setBackground(backgroundColor);
        list.setForeground(textColor);
        choiceBox.setBorder(new LineBorder(hoverColor, 1, true));
        InputMap im = choiceBox.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        im.put(KeyStroke.getKeyStroke("DOWN"), "none");
        return choiceBox;
    }

    /**
     * This function will create an editable flat design JComboBox: transparent
     * background, dark popup menu, white text and white caret.
     * @param hoverColor Color for background when the user moves the cursor over it
     * @param backgroundColor Color for background
     * @param textColor Color for text
     * @requires None
     * @modifies None
     * @effects None
     * @return a new JComboBox
     */
    static JComboBox<String> createEditableComboBox(Color hoverColor, Color backgroundColor, Color textColor) {
        JComboBox<String> comboBox = SideBarFactory.createComboBox(hoverColor, backgroundColor, textColor);
        comboBox.setEditable(true);
        comboBox.getEditor().getEditorComponent().setBackground(hoverColor);
        comboBox.getEditor().getEditorComponent().setForeground(textColor);
        ((JTextField)comboBox.getEditor().getEditorComponent()).setCaretColor(textColor);
        return comboBox;
    }

    /**
     * This function will create a flat design JCheckBox: transparent background,
     * white text with font size 18.
     * @param text text appearing next to the check box
     * @param textColor the color of the text
     * @requires None
     * @modifies None
     * @effects None
     * @return a new JCheckBox
     */
    static JCheckBox createCheckBox(String text, Color textColor) {
        LookAndFeel old = UIManager.getLookAndFeel();
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                        | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        JCheckBox checkBox = new JCheckBox(" " + text);
        checkBox.setBorderPaintedFlat(true);
        checkBox.setFocusPainted(false);
        checkBox.setOpaque(false);
        checkBox.setFont(new Font(ViewerFont.XHEI, Font.PLAIN, 20));
        checkBox.setFocusPainted(false);
        checkBox.setForeground(textColor);
        try {
            UIManager.setLookAndFeel(old);
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        return checkBox;
    }

    /**
     * This function would create the logo of main
     * @param textColor the color of the text
     * @requires None
     * @modifies None
     * @effects None
     * @return the logo of main
     */
    static JTextArea createIcon(Color textColor) {
        JTextArea icon = createSimpleTextArea("  Deadline Countdown   ", 55,
                textColor);
        icon.setFont(new Font("Berlin Sans FB Demi", Font.PLAIN, 32));
        icon.setVisible(true);
        return icon;
    }

    /**
     * This function would create the "Sort by" panel from the side bar
     * @param choiceBox the JComboBox for choosing the sorting order
     * @param text the "Sort by" text
     * @param backgroundColor the color for background
     * @param textColor the color of the text
     * @requires None
     * @modifies None
     * @effects None
     * @return a JToolBar with "Sort by" message and the JComboBox
     */
    static JToolBar createSortPanel(JComboBox<String> choiceBox, String text,
                                    Color backgroundColor, Color textColor) {
        JToolBar panel = new JToolBar();
        panel.setPreferredSize(new Dimension(0, 30));
        panel.setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));
        panel.setBackground(backgroundColor);
        panel.setOpaque(false);
        panel.setFloatable(false);
        panel.setBorder(null);
        panel.setBorderPainted(false);
        panel.setMargin(new Insets(0, 0, 0, 0));
        JTextArea hint = createSimpleTextArea("⇵  " + text, 39, textColor);
        hint.setFont(new Font(ViewerFont.XHEI, Font.PLAIN, 20));
        hint.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(hint);
        panel.add(choiceBox);
        return panel;
    }
}
